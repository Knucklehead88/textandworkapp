@page "/chat"
@using MudBlazor
@using TextAndWorkApp.Models
@using TextAndWorkApp.Services
@inject OpenAIService OpenAIService
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>AI Chat Assistant</PageTitle>
<div style="max-width: 600px; margin: auto;">
    <h4>AI Chatbot</h4>

    <div style="border: 1px solid #ccc; padding: 1rem; height: 400px; overflow-y: auto; border-radius: 8px;">
        @foreach (var msg in Messages)
        {
            <div class="my-2 d-flex" style="justify-content:@(msg.IsUser ? "flex-end" : "flex-start")">
                <div style="max-width:70%; background:@(msg.IsUser ? "#d1e7dd" : "#f8d7da"); padding:10px; border-radius:8px;">
                    <small>@(msg.IsUser ? "You" : "AI")</small><br />
                    @msg.Text
                </div>
            </div>
        }
        @if (IsThinking)
        {
            <div class="text-muted">AI is typing...</div>
        }
    </div>

    <input class="form-control mt-2"
           placeholder="Ask a question..."
           @bind="UserInput"
           @onkeydown="HandleKeyPress" />

    <button class="btn btn-primary mt-2 w-100" @onclick="SendMessage">Send</button>
</div>


@code {
    public class ChatMessage
    {
        public string Text { get; set; } = "";
        public bool IsUser { get; set; } = false;
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    private string UserInput { get; set; } = "";
    private List<ChatMessage> Messages { get; set; } = new();
    private bool IsThinking { get; set; } = false;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput)) return;

        // Add user message
        var userMessage = new ChatMessage { Text = UserInput, IsUser = true };
        Messages.Add(userMessage);

        var inputCopy = UserInput;
        UserInput = "";
        IsThinking = true;

        var response = await GetBotResponseAsync(inputCopy);

        Messages.Add(new ChatMessage { Text = response, IsUser = false });
        IsThinking = false;
    }

    private Task<string> GetBotResponseAsync(string prompt)
    {
        return OpenAIService.AskChatGPTAsync(prompt);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = SendMessage();
        }
    }
}


